<?php

declare(strict_types=1);

namespace Kodelines;

use Kodelines\Tools\Str;
use Kodelines\Helpers\Sql;

class Db
{

  /**
   * Var to contain singleton instance
   *
   */
  protected static $instance = null;

  /**
   * Get singleton class instance
   *
   * @return object      return var $instance
   */
  public static function getInstance(): object
  {

    if (self::$instance == null) {

      $config = config('db');

      self::$instance = new Sql($config['server'], $config['name'], $config['user'], $config['pass']);
    }

    return self::$instance;
  }

  /**
   * Questa classe non fa altro che connettersi al database e fornire metodi statici uguali a quelli di Helpers\Sql ma dentro istanza singleton per codice più pulito e connettersi automaticamente alla prima chiamata
   */
  public static function __callStatic($method, $args)
  {
    return call_user_func_array(array(self::getInstance(), $method), $args);
  }

  //Shortcuts

  
	/**
	 *  rimpiazza una coppia chiavi -> valori in una tabella database,scorciatoia per funzione insert in modalità replace
	 *
	 * @param  string $table
	 * @param  array $values
	 * @return bool
	 */
	public static function replace(string $table, array $values): int|bool
	{
		return self::getInstance()->insert($table, $values, 'REPLACE');
	}

	/**
	 *  rimpiazza una coppia chiavi -> valori in una tabella database,scorciatoia per funzione insert in modalità insert ignore
	 *
	 * @param  string $table
	 * @param  array $values
	 * @return bool
	 */
	public static function insertIgnore(string $table, array $values): int|bool
	{
		return self::getInstance()->insert($table, $values, 'INSERT IGNORE');
	}

  /**
   * Ritorna ultimo id inserito o false
   * 
   * @return int|bool
   */
  public static function lastInsertId(): int|bool {
    return self::getInstance()->lastInsertId();
  }


  /**
   * Insert multiple language into well formatted database table for multi langage
   *
   * @method insertLanguages
   * @param  array           $request Request array from multlanguage form
   * @param  string          $table  Table name (without _lang)
   * @param  int             $id of main item
   * @return bool
   */
  public static function insertLanguages(array $request, string $table, int $id): array {

    $language_table = $table . '_lang';

    $id_reference = 'id_' . $table;

    $return = [];

    foreach(config('app','languages') as $language) {

      if(!isset($request[$language]) || !is_array($request[$language])) {
        continue;
      }

      $request[$language]['language'] = $language;

      $request[$language][$id_reference] = $id;


      //Defined slug have the priority from auto generated by title
      if(isset($request[$language]['slug']) && !empty($request[$language]['slug'])) {

        $request[$language]['slug'] = Str::plain($request[$language]['slug'],true);

      } else {

        if(!empty($request[$language]['title'])) {

          $request[$language]['slug'] = Str::plain($request[$language]['title'],true);

          if(empty($request[$language]['meta_title'])) {
            $request[$language]['meta_title'] = $request[$language]['title'];
          }

          if(empty($request[$language]['merchant_title'])) {
            $request[$language]['merchant_title'] = $request[$language]['title'];
          }

          if(empty($request[$language]['title_image'])) {
            $request[$language]['title_image'] = $request[$language]['title'];
          }

        } else {
          $request[$language]['slug'] = Str::random(10);
        }

      }

      if(!empty($request[$language]['description'])) {

        if(empty($request[$language]['meta_description'])) {
          $request[$language]['meta_description'] = $request[$language]['description'];
        }

        if(empty($request[$language]['merchant_description'])) {
          $request[$language]['merchant_description'] = $request[$language]['description'];
        }

      }

      if(self::fieldExists($language_table,'slug')) {

        //Check for duplicate slug and add -2 to the new
        if($slugCheck = self::getArray("SELECT slug FROM " .$language_table." WHERE language = " . encode($language) . " AND slug = ".encode($request[$language]['slug'])." AND " .$id_reference." <> " . $id)) {

          if(count($slugCheck) > 0) {
            $request[$language]['slug'] = $request[$language]['slug'] . '-' . (count($slugCheck) + 1);
          }

        }

      }


      $return[$language] = $request[$language];

      self::replace($language_table,$request[$language]);

    }

    return $return;

  }

  /**
   * Get array with languages
   *
   * @method getLanguages
   * @param  string          $table  Table name (without _lang)
   * @param  int             $id of main item
   * @return array           Array with languages items
   */
  public static function getLanguages(int $id, string $table): array {

    $language_table = $table . '_lang';

    $id_reference = 'id_' . $table;

    $languages = self::getArray("SELECT * FROM " . $language_table . " WHERE " .$id_reference." = " . id($id));

    $return = array();

    foreach($languages as $lang) {

      $return[$lang['language']] = $lang;

    }

    return $return;

  }



  /**
   * Insert multiple items nto a database table and delete the old
   *
   * @method insertMultiple
   * @param  array          $new_items New items from form
   * @param  string         $table     Table name
   * @param  string|null    $id_external_name Name id of the id of the table
   * @param  int|null       $id id of item
   * @param  array          $old_items Old items, must be the same fomrat, thi will be compared to delete old items
   * @return bool
   */
  public static function insertMultiple(array $new_items, string $table, string|null $id_external_name, mixed $id, $old_items = array()):bool {

     $new_ids = array();

     $old_ids = array();

     //fetch array for old items
     foreach($old_items as $old) {

      if(!empty($old['id'])) { 
        $old_ids[$old['id']] = $old;
      }


     }

     //Nuovi oggetti vuoti e vecchi oggetti pieni elimina tutto
     if(empty($new_items) && !empty($old_items)) {
      return Db::query("DELETE FROM " . $table . " WHERE " . $id_external_name . " = " . id($id));
     }

     foreach($new_items as $new) {

       if(isset($new['id']) && !empty($new['id'])) {

         $new_ids[$new['id']] = $new;

         if(isset($old_ids[$new['id']])) {

           $old = $old_ids[$new['id']];

           self::updateArray($table,$new,'id',$new['id']);

         }


       } else {

         if($id_external_name !== NULL) {
            $new[$id_external_name] = $id;
         }
   
         if(self::insert($table,$new) && $newid = self::lastInsertId()) {
             $new_ids[$newid] = $new;
         }
       }

     }

     //Compare arrays for delete
     foreach($old_ids as $key => $value) {

       if(!isset($new_ids[$key])) {

         self::query("DELETE FROM ".$table." WHERE id = " . id($key));

       }

     }

     return true;

   }


   

  /**
   * Array match from required and inserted fields
   *
   * @return array
   */

  public static function convertSet($request = array(),$options = array()) {

    $array = array();

    foreach($options as $type => $value) {
      if(isset($request[$type]) && $request[$type] !== NULL) {
        $array[] = $type;
      }
    }

    if(count($array) == 0) {
      return NULL;
    } elseif(count($array) == 1) {
      return $array[0];
    } else {
      return implode(',', $array);
    }

  }

  /**
   * Display a set value
   *
   * @return array
   */

  public static function arraySet($set) {

    $array = explode(',',$set);

    if(count($array) == 0) {
      return array();
    }

    if(count($array) == 1 && empty($array[0])) {
      return array();
    }

    $translated = array();

    foreach($array as $val) {
      $translated[$val] = $val;
    }

    return $translated;

  }


  /**
   * Converte un nome tabella nel nome camel case per controllers e models
   *
   * @param string $table
   * @return string
   */
  public static function tableToCamelCase(string $table):string {

    $parts = explode('_',$table);

    if(count($parts) < 2) {
      return ucfirst($table);
    }

    $camel = '';

    foreach($parts as $part) {
      $camel .= ucfirst($part);
    }

    return $camel;

  }

  /**
   * Converte un nome tabella nel nome camel case per controllers e models
   *
   * @param string $table
   * @return string
   */
  public static function camelCaseToTable(string $camel):string {

    $parts = preg_split('/(?=[A-Z])/',$camel);

    if(!$parts || count($parts) < 2) {
      return mb_strtolower($camel);
    }

    $table = '';

    $position = 0;

    foreach($parts as $part) {

      if($position == 0) {
        $table .= mb_strtolower($part);
      } else {
        $table .= '_' . mb_strtolower($part);
      }

      $position++;
      
    }

    return $camel;

  }


  /**
	 *  Setta Bulk per istanza corrente
	 *
	 * @param bool $bulk
	 * @return bool
	 */
	public static function bulk(bool $bulk): bool
	{
		return self::getInstance()->bulk = $bulk;
	}

 
  /**
   * Genera un array chiave->valore per valori enum del database da usare in input select
   *
   * @param string $table
   * @param string $field
   * @param array $extra
   * @return array
   */
  public static function enumOptions(string $table, string $field,$extra = []): array {



    if(!$fields = self::getEnum($table,$field)) {
      return array();
    }

    $options = array();

    foreach($fields as $key => $value) {

      if(isset($translations[$value])) {
        $text = $translations[$value];
      } else {
        $text = $value;
      }

      $options[$value] = $text;
    }

    if(!empty($extra)) {
      foreach($extra as $key => $value) {

        if(isset($translations[$value])) {
          $text = $translations[$value];
        } else {
          $text = $value;
        }

        $options[$value] = $text;
      }
    }

    return $options;
  }


}
